const keys = [
    "applicant.person.firstName",
    "applicant.person.middleName",
    "applicant.person.lastName",
    "applicant.person.residentialAddress",
    "applicant.person.residentialAddress.streetAddress",
    "applicant.person.residentialAddress.city",
    "applicant.person.residentialAddress.region",
    "applicant.person.residentialAddress.region.code",
    "applicant.person.residentialAddress.postalCode",
    "applicant.person.residentialAddress.country",
    "applicant.person.residentialAddress.country.code",
    "applicant.person.postalAddress",
    "applicant.person.postalAddress.streetAddress",
    "applicant.person.postalAddress.city",
    "applicant.person.postalAddress.region",
    "applicant.person.postalAddress.region.code",
    "applicant.person.postalAddress.postalCode",
    "applicant.person.postalAddress.country",
    "applicant.person.postalAddress.country.code",
    "applicant.person.emailAddresses",
    "applicant.person.emailAddresses.type",
    "applicant.person.emailAddresses.value",
    "applicant.person.emailAddresses.isPreferred",
    "applicant.person.phoneNumbers",
    "applicant.person.phoneNumbers.type",
    "applicant.person.phoneNumbers.value",
    "applicant.person.phoneNumbers.isPreferred",
    "applicant.person.dateOfBirth",
    "applicant.person.gender",
    "applicant.person.nationalities",
    "applicant.person.nationalities.country",
    "applicant.person.nationalities.type",
    "applicant.person.employment",
    "applicant.person.employment.type",
    "applicant.person.employment.category",
    "applicant.person.taxDetails",
    "applicant.person.taxDetails.country",
    "applicant.person.taxDetails.isSupplied",
    "applicant.person.taxDetails.taxIdentificationNumber",
    "applicant.person.taxDetails.nonSupplyReasonCode",
    "applicant.person.identityVerification",
    "applicant.person.identityVerification.status",
    "applicant.person.identityVerification.completionTimestamp",
    "applicant.person.identityVerification.agentName",
    "applicant.person.screeningResults",
    "applicant.person.screeningResults.status",
    "applicant.person.screeningResults.completionTimestamp",
    "applicant.person.screeningResults.agentName",
    "tradingProduct",
    "tradingProduct.type",
    "tradingProduct.canTradeWarrants",
    "tradingProduct.contractNote",
    "tradingProduct.contractNote.type",
    "tradingProduct.contractNote.generationType",
    "settlement",
    "settlement.details",
    "settlement.details.accountName",
    "settlement.details.branchCode",
    "settlement.details.accountNumber",
    "settlement.details.usedForCredits",
    "settlement.details.usedForDebits",
    "settlement.details.usedForDividends",
    "settlement.details.type",
    "settlement.nettingPolicy",
    "settlement.holdFunds",
    "settlement.redirectDividends",
    "adviser",
    "adviser.code",
    "adviser.brokerageCode",
    "termsAndConditions",
    "termsAndConditions.accepted",
    "termsAndConditions.methodOfAcceptance",
    "termsAndConditions.timestamp",
    "holdingDetails",
    "holdingDetails.hin",
    "holdingDetails.pid",
    "holdingDetails.address",
    "holdingDetails.address.addressLines",
    "holdingDetails.address.postCode",
    "holdingDetails.emailAddress"
  ];
  

  const result = keys.map(key => 
    `"${key}": {target: "${key}", type: "string", enumMap: { mr: "MR", mrs: "MRS", ms: "MS", miss: "MISS" }},`
  );
  
  console.log(result.join("\n"));
  
  